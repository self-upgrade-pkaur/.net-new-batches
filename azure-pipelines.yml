# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
variables:
  buildConfiguration: 'Release'
  pathtosolution: ContactApp/
  pathtoproject: 'ContactApp/Web'
  pathtoTest: 'ContactApp/Test'

# using Microsoft Hosted agents

# pool:
#   vmImage: 'windows-2019'

#pointitng to default build server from Nick's VM

pool : Default

# Another way of setting a customized default pool

steps:
  #1 - script: echo First step!
  #2 Build
- script: dotnet build --configuration $(buildConfiguration)
  workingDirectory: $(pathtosolution)
  displayName: 'dotnet build $(buildConfiguration)'
# - script: dotnet test
#     --configuration $(buildConfiguration)
#     --logger trx
#     --no-build
#   workingDirectory: $(pathtosolution)
- script: dotnet test
    --configuration $(buildConfiguration)
    --logger trx
    --no-build
    --results-directory $(Build.ArtifactStagingDirectory)/test/
    /p:CollectCoverage=true
    /p:CoverletOutputFormat=opencover
    /p:CoverletOutput='$(Build.ArtifactStagingDirectory)/coverage/'
  workingDirectory: $(pathtosolution)
  displayName: 'dotnet test'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '*.trx'
    searchFolder: '$(Build.ArtifactStagingDirectory)/test'
  displayName: 'dotnet publish results'
# To see the test coverage in the Tests of every build
# - task: PublishTestResults@2
#   inputs:
#     testResultsFormat: 'VSTest'
#     testResultsFiles: '*.trx'
#     searchFolder: '$(Build.ArtifactStagingDirectory)/test'
#   displayName: 'Publish test results '

# publish - works 
#3 - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     projects: '$(pathtoproject)/*.csproj'
#     arguments: '--configuration $(buildConfiguration)'
# - script: dotnet   **/*Test*.csproj
#     --configuration $(buildConfiguration)
#     --logger trx
#     --no-build
#   workingDirectory: $(pathtosolution)
#   displayName: Publish


# this is used for deployment to dev server - the only server
# - task: AzureRmWebAppDeployment@4
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: 'KaurrevatureCon'
#     appType: 'webApp'
#     WebAppName: 'contactapplearn'
#     packageForLinux: '$(System.DefaultWorkingDirectory)/$(pathtoproject)/**/*.zip'

# demo for various stages

# stages:
# - stage: Build
#   jobs:
#   - job: BuildJob
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#       - script: echo Building!

# - stage: Test
#   jobs:
#   - job: TestOnWindows
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     - script: echo Testing on Windows!
#       displayName: Test On Windows Log
#   - job: TestOnLinux
#     steps:
#     - script: echo Testing on Linux!
#       displayName: Test On Linux Log
  

# - stage: Deploy
#   jobs:
#   - job: Deploy
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     - script: echo Deploying the code!
#       displayName: Deploy Log